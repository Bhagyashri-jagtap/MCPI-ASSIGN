
lcdshift.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000da0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08000f28  08000f28  00001f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f54  08000f54  00002060  2**0
                  CONTENTS
  4 .ARM          00000000  08000f54  08000f54  00002060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f54  08000f54  00002060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f54  08000f54  00001f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000f58  08000f58  00001f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08000f5c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002060  2**0
                  CONTENTS
 10 .bss          0000016c  20000060  20000060  00002060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001cc  200001cc  00002060  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002060  2**0
                  CONTENTS, READONLY
 13 .debug_info   000014e5  00000000  00000000  0000208a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000642  00000000  00000000  0000356f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001b8  00000000  00000000  00003bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000129  00000000  00000000  00003d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a161  00000000  00000000  00003e99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002040  00000000  00000000  0001dffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008da73  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000adaad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000b70  00000000  00000000  000adaf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000ae660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000043  00000000  00000000  000ae67f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000f10 	.word	0x08000f10

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000064 	.word	0x20000064
 80001c4:	08000f10 	.word	0x08000f10

080001c8 <__io_putchar>:
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

//void ITM_SendChar(uint8_t ch)
int __io_putchar(int ch)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	//Enable TRCENA
	DEMCR |= (1 << 24);
 80001d0:	4b0e      	ldr	r3, [pc, #56]	@ (800020c <__io_putchar+0x44>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a0d      	ldr	r2, [pc, #52]	@ (800020c <__io_putchar+0x44>)
 80001d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80001da:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80001dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000210 <__io_putchar+0x48>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000210 <__io_putchar+0x48>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80001e8:	bf00      	nop
 80001ea:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	f003 0301 	and.w	r3, r3, #1
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d0f8      	beq.n	80001ea <__io_putchar+0x22>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80001f8:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	6013      	str	r3, [r2, #0]

	return 1;
 8000200:	2301      	movs	r3, #1
}
 8000202:	4618      	mov	r0, r3
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	e000edfc 	.word	0xe000edfc
 8000210:	e0000e00 	.word	0xe0000e00

08000214 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 8000214:	b480      	push	{r7}
 8000216:	b085      	sub	sp, #20
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 800021c:	4b0e      	ldr	r3, [pc, #56]	@ (8000258 <DelayMs+0x44>)
 800021e:	685b      	ldr	r3, [r3, #4]
 8000220:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000222:	4b0e      	ldr	r3, [pc, #56]	@ (800025c <DelayMs+0x48>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a0e      	ldr	r2, [pc, #56]	@ (8000260 <DelayMs+0x4c>)
 8000228:	fba2 2303 	umull	r2, r3, r2, r3
 800022c:	099b      	lsrs	r3, r3, #6
 800022e:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	68ba      	ldr	r2, [r7, #8]
 8000234:	fb02 f303 	mul.w	r3, r2, r3
 8000238:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800023a:	bf00      	nop
 800023c:	4b06      	ldr	r3, [pc, #24]	@ (8000258 <DelayMs+0x44>)
 800023e:	685a      	ldr	r2, [r3, #4]
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	1ad2      	subs	r2, r2, r3
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	429a      	cmp	r2, r3
 8000248:	d3f8      	bcc.n	800023c <DelayMs+0x28>
}
 800024a:	bf00      	nop
 800024c:	bf00      	nop
 800024e:	3714      	adds	r7, #20
 8000250:	46bd      	mov	sp, r7
 8000252:	bc80      	pop	{r7}
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	e0001000 	.word	0xe0001000
 800025c:	20000000 	.word	0x20000000
 8000260:	10624dd3 	.word	0x10624dd3

08000264 <LcdBusyWait>:
 *  Created on: Mar 29, 2024
 *      Author: bhagyashri
 */
#include "lcd.h"

void LcdBusyWait(void) {
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
	uint32_t state;
	// make D7/BF pin as input
	LCD_DATA_GPIO->MODER &= ~(BV(LCD_BF*2)|BV(LCD_BF*2+1));
 800026a:	4b10      	ldr	r3, [pc, #64]	@ (80002ac <LcdBusyWait+0x48>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4a0f      	ldr	r2, [pc, #60]	@ (80002ac <LcdBusyWait+0x48>)
 8000270:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000274:	6013      	str	r3, [r2, #0]
	// set RS=0, RW=1, EN=1
	LCD_CTRL_GPIO->BSRR = BV(LCD_RS_CLR) | BV(LCD_RW) | BV(LCD_EN);
 8000276:	4b0d      	ldr	r3, [pc, #52]	@ (80002ac <LcdBusyWait+0x48>)
 8000278:	4a0d      	ldr	r2, [pc, #52]	@ (80002b0 <LcdBusyWait+0x4c>)
 800027a:	619a      	str	r2, [r3, #24]
	// read data
	do {
		state = LCD_DATA_GPIO->IDR;
 800027c:	4b0b      	ldr	r3, [pc, #44]	@ (80002ac <LcdBusyWait+0x48>)
 800027e:	691b      	ldr	r3, [r3, #16]
 8000280:	607b      	str	r3, [r7, #4]
	} while((state & BV(LCD_BF)) != 0); // repeat if BF=1
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	f003 0308 	and.w	r3, r3, #8
 8000288:	2b00      	cmp	r3, #0
 800028a:	d1f7      	bne.n	800027c <LcdBusyWait+0x18>
	// set RW=0, EN=0
	LCD_CTRL_GPIO->BSRR = BV(LCD_RW_CLR) | BV(LCD_EN_CLR);
 800028c:	4b07      	ldr	r3, [pc, #28]	@ (80002ac <LcdBusyWait+0x48>)
 800028e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000292:	619a      	str	r2, [r3, #24]
	// make D7/BF pin as output
	LCD_DATA_GPIO->MODER |= BV(LCD_BF*2);
 8000294:	4b05      	ldr	r3, [pc, #20]	@ (80002ac <LcdBusyWait+0x48>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a04      	ldr	r2, [pc, #16]	@ (80002ac <LcdBusyWait+0x48>)
 800029a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800029e:	6013      	str	r3, [r2, #0]
}
 80002a0:	bf00      	nop
 80002a2:	370c      	adds	r7, #12
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bc80      	pop	{r7}
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	40020c00 	.word	0x40020c00
 80002b0:	002000c0 	.word	0x002000c0

080002b4 <LcdWriteNibble>:

void LcdWriteNibble(uint8_t rs, uint8_t val) {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	460a      	mov	r2, r1
 80002be:	71fb      	strb	r3, [r7, #7]
 80002c0:	4613      	mov	r3, r2
 80002c2:	71bb      	strb	r3, [r7, #6]
	// set RS, RW = 0
	if(rs == LCD_CMD) // RS = 0
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d104      	bne.n	80002d4 <LcdWriteNibble+0x20>
		LCD_CTRL_GPIO->BSRR = BV(LCD_RS_CLR) | BV(LCD_RW_CLR);
 80002ca:	4b11      	ldr	r3, [pc, #68]	@ (8000310 <LcdWriteNibble+0x5c>)
 80002cc:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 80002d0:	619a      	str	r2, [r3, #24]
 80002d2:	e002      	b.n	80002da <LcdWriteNibble+0x26>
	else // RS = 1
		LCD_CTRL_GPIO->BSRR = BV(LCD_RS) | BV(LCD_RW_CLR);
 80002d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000310 <LcdWriteNibble+0x5c>)
 80002d6:	4a0f      	ldr	r2, [pc, #60]	@ (8000314 <LcdWriteNibble+0x60>)
 80002d8:	619a      	str	r2, [r3, #24]
	// write data (4-bits)
	LCD_DATA_GPIO->ODR &= ~(BV(LCD_D7) | BV(LCD_D6) | BV(LCD_D5) | BV(LCD_D4));
 80002da:	4b0d      	ldr	r3, [pc, #52]	@ (8000310 <LcdWriteNibble+0x5c>)
 80002dc:	695b      	ldr	r3, [r3, #20]
 80002de:	4a0c      	ldr	r2, [pc, #48]	@ (8000310 <LcdWriteNibble+0x5c>)
 80002e0:	f023 030f 	bic.w	r3, r3, #15
 80002e4:	6153      	str	r3, [r2, #20]
	LCD_DATA_GPIO->ODR |= val << LCD_D4;
 80002e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000310 <LcdWriteNibble+0x5c>)
 80002e8:	695a      	ldr	r2, [r3, #20]
 80002ea:	79bb      	ldrb	r3, [r7, #6]
 80002ec:	4908      	ldr	r1, [pc, #32]	@ (8000310 <LcdWriteNibble+0x5c>)
 80002ee:	4313      	orrs	r3, r2
 80002f0:	614b      	str	r3, [r1, #20]
	// falling edge on EN
	LCD_CTRL_GPIO->BSRR = BV(LCD_EN);
 80002f2:	4b07      	ldr	r3, [pc, #28]	@ (8000310 <LcdWriteNibble+0x5c>)
 80002f4:	2280      	movs	r2, #128	@ 0x80
 80002f6:	619a      	str	r2, [r3, #24]
	DelayMs(1);
 80002f8:	2001      	movs	r0, #1
 80002fa:	f7ff ff8b 	bl	8000214 <DelayMs>
	LCD_CTRL_GPIO->BSRR = BV(LCD_EN_CLR);
 80002fe:	4b04      	ldr	r3, [pc, #16]	@ (8000310 <LcdWriteNibble+0x5c>)
 8000300:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000304:	619a      	str	r2, [r3, #24]
}
 8000306:	bf00      	nop
 8000308:	3708      	adds	r7, #8
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40020c00 	.word	0x40020c00
 8000314:	00400020 	.word	0x00400020

08000318 <LcdWrite>:

void LcdWrite(uint8_t rs, uint8_t val) {
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	460a      	mov	r2, r1
 8000322:	71fb      	strb	r3, [r7, #7]
 8000324:	4613      	mov	r3, r2
 8000326:	71bb      	strb	r3, [r7, #6]
	uint8_t high = val >> 4, low = val & 0x0F;
 8000328:	79bb      	ldrb	r3, [r7, #6]
 800032a:	091b      	lsrs	r3, r3, #4
 800032c:	73fb      	strb	r3, [r7, #15]
 800032e:	79bb      	ldrb	r3, [r7, #6]
 8000330:	f003 030f 	and.w	r3, r3, #15
 8000334:	73bb      	strb	r3, [r7, #14]
	// write high nibble
	LcdWriteNibble(rs, high);
 8000336:	7bfa      	ldrb	r2, [r7, #15]
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	4611      	mov	r1, r2
 800033c:	4618      	mov	r0, r3
 800033e:	f7ff ffb9 	bl	80002b4 <LcdWriteNibble>
	// write low nibble
	LcdWriteNibble(rs, low);
 8000342:	7bba      	ldrb	r2, [r7, #14]
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	4611      	mov	r1, r2
 8000348:	4618      	mov	r0, r3
 800034a:	f7ff ffb3 	bl	80002b4 <LcdWriteNibble>
	// wait for busy flag
	LcdBusyWait();
 800034e:	f7ff ff89 	bl	8000264 <LcdBusyWait>
	DelayMs(3);
 8000352:	2003      	movs	r0, #3
 8000354:	f7ff ff5e 	bl	8000214 <DelayMs>
}
 8000358:	bf00      	nop
 800035a:	3710      	adds	r7, #16
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}

08000360 <LcdShift>:
	for(i=0; str[i]!='\0'; i++)
		LcdWrite(LCD_DATA, str[i]);
}

void LcdShift(uint8_t num)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for(i=0;i<num;i++)
 800036a:	2300      	movs	r3, #0
 800036c:	73fb      	strb	r3, [r7, #15]
 800036e:	e00a      	b.n	8000386 <LcdShift+0x26>
	{
		DelayMs(1000);
 8000370:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000374:	f7ff ff4e 	bl	8000214 <DelayMs>

		LcdWrite(LCD_CMD,LCD_SHIFT);
 8000378:	2118      	movs	r1, #24
 800037a:	2000      	movs	r0, #0
 800037c:	f7ff ffcc 	bl	8000318 <LcdWrite>
	for(i=0;i<num;i++)
 8000380:	7bfb      	ldrb	r3, [r7, #15]
 8000382:	3301      	adds	r3, #1
 8000384:	73fb      	strb	r3, [r7, #15]
 8000386:	7bfa      	ldrb	r2, [r7, #15]
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	429a      	cmp	r2, r3
 800038c:	d3f0      	bcc.n	8000370 <LcdShift+0x10>
	}

}
 800038e:	bf00      	nop
 8000390:	bf00      	nop
 8000392:	3710      	adds	r7, #16
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}

08000398 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	SystemInit();
 800039c:	f000 f8b0 	bl	8000500 <SystemInit>
	printf("Hello World!\n");
 80003a0:	4805      	ldr	r0, [pc, #20]	@ (80003b8 <main+0x20>)
 80003a2:	f000 fa25 	bl	80007f0 <puts>
	printf("DESD @ Sunbeam Infotech!\n");
 80003a6:	4805      	ldr	r0, [pc, #20]	@ (80003bc <main+0x24>)
 80003a8:	f000 fa22 	bl	80007f0 <puts>
	LcdShift(10);
 80003ac:	200a      	movs	r0, #10
 80003ae:	f7ff ffd7 	bl	8000360 <LcdShift>
	return 0;
 80003b2:	2300      	movs	r3, #0
}
 80003b4:	4618      	mov	r0, r3
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	08000f28 	.word	0x08000f28
 80003bc:	08000f38 	.word	0x08000f38

080003c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b086      	sub	sp, #24
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	60f8      	str	r0, [r7, #12]
 80003c8:	60b9      	str	r1, [r7, #8]
 80003ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]
 80003d0:	e00a      	b.n	80003e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80003d2:	f3af 8000 	nop.w
 80003d6:	4601      	mov	r1, r0
 80003d8:	68bb      	ldr	r3, [r7, #8]
 80003da:	1c5a      	adds	r2, r3, #1
 80003dc:	60ba      	str	r2, [r7, #8]
 80003de:	b2ca      	uxtb	r2, r1
 80003e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	3301      	adds	r3, #1
 80003e6:	617b      	str	r3, [r7, #20]
 80003e8:	697a      	ldr	r2, [r7, #20]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	dbf0      	blt.n	80003d2 <_read+0x12>
	}

return len;
 80003f0:	687b      	ldr	r3, [r7, #4]
}
 80003f2:	4618      	mov	r0, r3
 80003f4:	3718      	adds	r7, #24
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}

080003fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003fa:	b580      	push	{r7, lr}
 80003fc:	b086      	sub	sp, #24
 80003fe:	af00      	add	r7, sp, #0
 8000400:	60f8      	str	r0, [r7, #12]
 8000402:	60b9      	str	r1, [r7, #8]
 8000404:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000406:	2300      	movs	r3, #0
 8000408:	617b      	str	r3, [r7, #20]
 800040a:	e009      	b.n	8000420 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800040c:	68bb      	ldr	r3, [r7, #8]
 800040e:	1c5a      	adds	r2, r3, #1
 8000410:	60ba      	str	r2, [r7, #8]
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	4618      	mov	r0, r3
 8000416:	f7ff fed7 	bl	80001c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800041a:	697b      	ldr	r3, [r7, #20]
 800041c:	3301      	adds	r3, #1
 800041e:	617b      	str	r3, [r7, #20]
 8000420:	697a      	ldr	r2, [r7, #20]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	429a      	cmp	r2, r3
 8000426:	dbf1      	blt.n	800040c <_write+0x12>
	}
	return len;
 8000428:	687b      	ldr	r3, [r7, #4]
}
 800042a:	4618      	mov	r0, r3
 800042c:	3718      	adds	r7, #24
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}

08000432 <_close>:

int _close(int file)
{
 8000432:	b480      	push	{r7}
 8000434:	b083      	sub	sp, #12
 8000436:	af00      	add	r7, sp, #0
 8000438:	6078      	str	r0, [r7, #4]
	return -1;
 800043a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800043e:	4618      	mov	r0, r3
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr

08000448 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000458:	605a      	str	r2, [r3, #4]
	return 0;
 800045a:	2300      	movs	r3, #0
}
 800045c:	4618      	mov	r0, r3
 800045e:	370c      	adds	r7, #12
 8000460:	46bd      	mov	sp, r7
 8000462:	bc80      	pop	{r7}
 8000464:	4770      	bx	lr

08000466 <_isatty>:

int _isatty(int file)
{
 8000466:	b480      	push	{r7}
 8000468:	b083      	sub	sp, #12
 800046a:	af00      	add	r7, sp, #0
 800046c:	6078      	str	r0, [r7, #4]
	return 1;
 800046e:	2301      	movs	r3, #1
}
 8000470:	4618      	mov	r0, r3
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	bc80      	pop	{r7}
 8000478:	4770      	bx	lr

0800047a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800047a:	b480      	push	{r7}
 800047c:	b085      	sub	sp, #20
 800047e:	af00      	add	r7, sp, #0
 8000480:	60f8      	str	r0, [r7, #12]
 8000482:	60b9      	str	r1, [r7, #8]
 8000484:	607a      	str	r2, [r7, #4]
	return 0;
 8000486:	2300      	movs	r3, #0
}
 8000488:	4618      	mov	r0, r3
 800048a:	3714      	adds	r7, #20
 800048c:	46bd      	mov	sp, r7
 800048e:	bc80      	pop	{r7}
 8000490:	4770      	bx	lr
	...

08000494 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b086      	sub	sp, #24
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800049c:	4a14      	ldr	r2, [pc, #80]	@ (80004f0 <_sbrk+0x5c>)
 800049e:	4b15      	ldr	r3, [pc, #84]	@ (80004f4 <_sbrk+0x60>)
 80004a0:	1ad3      	subs	r3, r2, r3
 80004a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004a4:	697b      	ldr	r3, [r7, #20]
 80004a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004a8:	4b13      	ldr	r3, [pc, #76]	@ (80004f8 <_sbrk+0x64>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d102      	bne.n	80004b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004b0:	4b11      	ldr	r3, [pc, #68]	@ (80004f8 <_sbrk+0x64>)
 80004b2:	4a12      	ldr	r2, [pc, #72]	@ (80004fc <_sbrk+0x68>)
 80004b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004b6:	4b10      	ldr	r3, [pc, #64]	@ (80004f8 <_sbrk+0x64>)
 80004b8:	681a      	ldr	r2, [r3, #0]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4413      	add	r3, r2
 80004be:	693a      	ldr	r2, [r7, #16]
 80004c0:	429a      	cmp	r2, r3
 80004c2:	d207      	bcs.n	80004d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004c4:	f000 fac2 	bl	8000a4c <__errno>
 80004c8:	4603      	mov	r3, r0
 80004ca:	220c      	movs	r2, #12
 80004cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004d2:	e009      	b.n	80004e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004d4:	4b08      	ldr	r3, [pc, #32]	@ (80004f8 <_sbrk+0x64>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004da:	4b07      	ldr	r3, [pc, #28]	@ (80004f8 <_sbrk+0x64>)
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4413      	add	r3, r2
 80004e2:	4a05      	ldr	r2, [pc, #20]	@ (80004f8 <_sbrk+0x64>)
 80004e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004e6:	68fb      	ldr	r3, [r7, #12]
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3718      	adds	r7, #24
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20020000 	.word	0x20020000
 80004f4:	00000400 	.word	0x00000400
 80004f8:	2000007c 	.word	0x2000007c
 80004fc:	200001d0 	.word	0x200001d0

08000500 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  DWT_Init();
 8000504:	f000 f802 	bl	800050c <DWT_Init>
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}

0800050c <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000510:	4b14      	ldr	r3, [pc, #80]	@ (8000564 <DWT_Init+0x58>)
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	4a13      	ldr	r2, [pc, #76]	@ (8000564 <DWT_Init+0x58>)
 8000516:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800051a:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800051c:	4b11      	ldr	r3, [pc, #68]	@ (8000564 <DWT_Init+0x58>)
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	4a10      	ldr	r2, [pc, #64]	@ (8000564 <DWT_Init+0x58>)
 8000522:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000526:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000528:	4b0f      	ldr	r3, [pc, #60]	@ (8000568 <DWT_Init+0x5c>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a0e      	ldr	r2, [pc, #56]	@ (8000568 <DWT_Init+0x5c>)
 800052e:	f023 0301 	bic.w	r3, r3, #1
 8000532:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000534:	4b0c      	ldr	r3, [pc, #48]	@ (8000568 <DWT_Init+0x5c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a0b      	ldr	r2, [pc, #44]	@ (8000568 <DWT_Init+0x5c>)
 800053a:	f043 0301 	orr.w	r3, r3, #1
 800053e:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000540:	4b09      	ldr	r3, [pc, #36]	@ (8000568 <DWT_Init+0x5c>)
 8000542:	2200      	movs	r2, #0
 8000544:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000546:	bf00      	nop
    __ASM volatile ("NOP");
 8000548:	bf00      	nop
    __ASM volatile ("NOP");
 800054a:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 800054c:	4b06      	ldr	r3, [pc, #24]	@ (8000568 <DWT_Init+0x5c>)
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	2b00      	cmp	r3, #0
 8000552:	bf0c      	ite	eq
 8000554:	2301      	moveq	r3, #1
 8000556:	2300      	movne	r3, #0
 8000558:	b2db      	uxtb	r3, r3
}
 800055a:	4618      	mov	r0, r3
 800055c:	46bd      	mov	sp, r7
 800055e:	bc80      	pop	{r7}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	e000edf0 	.word	0xe000edf0
 8000568:	e0001000 	.word	0xe0001000

0800056c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800056c:	480d      	ldr	r0, [pc, #52]	@ (80005a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800056e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000570:	f7ff ffc6 	bl	8000500 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000574:	480c      	ldr	r0, [pc, #48]	@ (80005a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000576:	490d      	ldr	r1, [pc, #52]	@ (80005ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000578:	4a0d      	ldr	r2, [pc, #52]	@ (80005b0 <LoopForever+0xe>)
  movs r3, #0
 800057a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800057c:	e002      	b.n	8000584 <LoopCopyDataInit>

0800057e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800057e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000582:	3304      	adds	r3, #4

08000584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000588:	d3f9      	bcc.n	800057e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800058a:	4a0a      	ldr	r2, [pc, #40]	@ (80005b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800058c:	4c0a      	ldr	r4, [pc, #40]	@ (80005b8 <LoopForever+0x16>)
  movs r3, #0
 800058e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000590:	e001      	b.n	8000596 <LoopFillZerobss>

08000592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000594:	3204      	adds	r2, #4

08000596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000598:	d3fb      	bcc.n	8000592 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800059a:	f000 fa5d 	bl	8000a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800059e:	f7ff fefb 	bl	8000398 <main>

080005a2 <LoopForever>:

LoopForever:
  b LoopForever
 80005a2:	e7fe      	b.n	80005a2 <LoopForever>
  ldr   r0, =_estack
 80005a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005ac:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80005b0:	08000f5c 	.word	0x08000f5c
  ldr r2, =_sbss
 80005b4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80005b8:	200001cc 	.word	0x200001cc

080005bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005bc:	e7fe      	b.n	80005bc <ADC_IRQHandler>
	...

080005c0 <std>:
 80005c0:	2300      	movs	r3, #0
 80005c2:	b510      	push	{r4, lr}
 80005c4:	4604      	mov	r4, r0
 80005c6:	e9c0 3300 	strd	r3, r3, [r0]
 80005ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80005ce:	6083      	str	r3, [r0, #8]
 80005d0:	8181      	strh	r1, [r0, #12]
 80005d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80005d4:	81c2      	strh	r2, [r0, #14]
 80005d6:	6183      	str	r3, [r0, #24]
 80005d8:	4619      	mov	r1, r3
 80005da:	2208      	movs	r2, #8
 80005dc:	305c      	adds	r0, #92	@ 0x5c
 80005de:	f000 f9e7 	bl	80009b0 <memset>
 80005e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000618 <std+0x58>)
 80005e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80005e6:	4b0d      	ldr	r3, [pc, #52]	@ (800061c <std+0x5c>)
 80005e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80005ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000620 <std+0x60>)
 80005ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80005ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000624 <std+0x64>)
 80005f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80005f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000628 <std+0x68>)
 80005f4:	6224      	str	r4, [r4, #32]
 80005f6:	429c      	cmp	r4, r3
 80005f8:	d006      	beq.n	8000608 <std+0x48>
 80005fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80005fe:	4294      	cmp	r4, r2
 8000600:	d002      	beq.n	8000608 <std+0x48>
 8000602:	33d0      	adds	r3, #208	@ 0xd0
 8000604:	429c      	cmp	r4, r3
 8000606:	d105      	bne.n	8000614 <std+0x54>
 8000608:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800060c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000610:	f000 ba46 	b.w	8000aa0 <__retarget_lock_init_recursive>
 8000614:	bd10      	pop	{r4, pc}
 8000616:	bf00      	nop
 8000618:	08000801 	.word	0x08000801
 800061c:	08000823 	.word	0x08000823
 8000620:	0800085b 	.word	0x0800085b
 8000624:	0800087f 	.word	0x0800087f
 8000628:	20000080 	.word	0x20000080

0800062c <stdio_exit_handler>:
 800062c:	4a02      	ldr	r2, [pc, #8]	@ (8000638 <stdio_exit_handler+0xc>)
 800062e:	4903      	ldr	r1, [pc, #12]	@ (800063c <stdio_exit_handler+0x10>)
 8000630:	4803      	ldr	r0, [pc, #12]	@ (8000640 <stdio_exit_handler+0x14>)
 8000632:	f000 b869 	b.w	8000708 <_fwalk_sglue>
 8000636:	bf00      	nop
 8000638:	20000004 	.word	0x20000004
 800063c:	08000d99 	.word	0x08000d99
 8000640:	20000014 	.word	0x20000014

08000644 <cleanup_stdio>:
 8000644:	6841      	ldr	r1, [r0, #4]
 8000646:	4b0c      	ldr	r3, [pc, #48]	@ (8000678 <cleanup_stdio+0x34>)
 8000648:	4299      	cmp	r1, r3
 800064a:	b510      	push	{r4, lr}
 800064c:	4604      	mov	r4, r0
 800064e:	d001      	beq.n	8000654 <cleanup_stdio+0x10>
 8000650:	f000 fba2 	bl	8000d98 <_fflush_r>
 8000654:	68a1      	ldr	r1, [r4, #8]
 8000656:	4b09      	ldr	r3, [pc, #36]	@ (800067c <cleanup_stdio+0x38>)
 8000658:	4299      	cmp	r1, r3
 800065a:	d002      	beq.n	8000662 <cleanup_stdio+0x1e>
 800065c:	4620      	mov	r0, r4
 800065e:	f000 fb9b 	bl	8000d98 <_fflush_r>
 8000662:	68e1      	ldr	r1, [r4, #12]
 8000664:	4b06      	ldr	r3, [pc, #24]	@ (8000680 <cleanup_stdio+0x3c>)
 8000666:	4299      	cmp	r1, r3
 8000668:	d004      	beq.n	8000674 <cleanup_stdio+0x30>
 800066a:	4620      	mov	r0, r4
 800066c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000670:	f000 bb92 	b.w	8000d98 <_fflush_r>
 8000674:	bd10      	pop	{r4, pc}
 8000676:	bf00      	nop
 8000678:	20000080 	.word	0x20000080
 800067c:	200000e8 	.word	0x200000e8
 8000680:	20000150 	.word	0x20000150

08000684 <global_stdio_init.part.0>:
 8000684:	b510      	push	{r4, lr}
 8000686:	4b0b      	ldr	r3, [pc, #44]	@ (80006b4 <global_stdio_init.part.0+0x30>)
 8000688:	4c0b      	ldr	r4, [pc, #44]	@ (80006b8 <global_stdio_init.part.0+0x34>)
 800068a:	4a0c      	ldr	r2, [pc, #48]	@ (80006bc <global_stdio_init.part.0+0x38>)
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	4620      	mov	r0, r4
 8000690:	2200      	movs	r2, #0
 8000692:	2104      	movs	r1, #4
 8000694:	f7ff ff94 	bl	80005c0 <std>
 8000698:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800069c:	2201      	movs	r2, #1
 800069e:	2109      	movs	r1, #9
 80006a0:	f7ff ff8e 	bl	80005c0 <std>
 80006a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80006a8:	2202      	movs	r2, #2
 80006aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006ae:	2112      	movs	r1, #18
 80006b0:	f7ff bf86 	b.w	80005c0 <std>
 80006b4:	200001b8 	.word	0x200001b8
 80006b8:	20000080 	.word	0x20000080
 80006bc:	0800062d 	.word	0x0800062d

080006c0 <__sfp_lock_acquire>:
 80006c0:	4801      	ldr	r0, [pc, #4]	@ (80006c8 <__sfp_lock_acquire+0x8>)
 80006c2:	f000 b9ee 	b.w	8000aa2 <__retarget_lock_acquire_recursive>
 80006c6:	bf00      	nop
 80006c8:	200001c1 	.word	0x200001c1

080006cc <__sfp_lock_release>:
 80006cc:	4801      	ldr	r0, [pc, #4]	@ (80006d4 <__sfp_lock_release+0x8>)
 80006ce:	f000 b9e9 	b.w	8000aa4 <__retarget_lock_release_recursive>
 80006d2:	bf00      	nop
 80006d4:	200001c1 	.word	0x200001c1

080006d8 <__sinit>:
 80006d8:	b510      	push	{r4, lr}
 80006da:	4604      	mov	r4, r0
 80006dc:	f7ff fff0 	bl	80006c0 <__sfp_lock_acquire>
 80006e0:	6a23      	ldr	r3, [r4, #32]
 80006e2:	b11b      	cbz	r3, 80006ec <__sinit+0x14>
 80006e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006e8:	f7ff bff0 	b.w	80006cc <__sfp_lock_release>
 80006ec:	4b04      	ldr	r3, [pc, #16]	@ (8000700 <__sinit+0x28>)
 80006ee:	6223      	str	r3, [r4, #32]
 80006f0:	4b04      	ldr	r3, [pc, #16]	@ (8000704 <__sinit+0x2c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d1f5      	bne.n	80006e4 <__sinit+0xc>
 80006f8:	f7ff ffc4 	bl	8000684 <global_stdio_init.part.0>
 80006fc:	e7f2      	b.n	80006e4 <__sinit+0xc>
 80006fe:	bf00      	nop
 8000700:	08000645 	.word	0x08000645
 8000704:	200001b8 	.word	0x200001b8

08000708 <_fwalk_sglue>:
 8000708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800070c:	4607      	mov	r7, r0
 800070e:	4688      	mov	r8, r1
 8000710:	4614      	mov	r4, r2
 8000712:	2600      	movs	r6, #0
 8000714:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000718:	f1b9 0901 	subs.w	r9, r9, #1
 800071c:	d505      	bpl.n	800072a <_fwalk_sglue+0x22>
 800071e:	6824      	ldr	r4, [r4, #0]
 8000720:	2c00      	cmp	r4, #0
 8000722:	d1f7      	bne.n	8000714 <_fwalk_sglue+0xc>
 8000724:	4630      	mov	r0, r6
 8000726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800072a:	89ab      	ldrh	r3, [r5, #12]
 800072c:	2b01      	cmp	r3, #1
 800072e:	d907      	bls.n	8000740 <_fwalk_sglue+0x38>
 8000730:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000734:	3301      	adds	r3, #1
 8000736:	d003      	beq.n	8000740 <_fwalk_sglue+0x38>
 8000738:	4629      	mov	r1, r5
 800073a:	4638      	mov	r0, r7
 800073c:	47c0      	blx	r8
 800073e:	4306      	orrs	r6, r0
 8000740:	3568      	adds	r5, #104	@ 0x68
 8000742:	e7e9      	b.n	8000718 <_fwalk_sglue+0x10>

08000744 <_puts_r>:
 8000744:	6a03      	ldr	r3, [r0, #32]
 8000746:	b570      	push	{r4, r5, r6, lr}
 8000748:	6884      	ldr	r4, [r0, #8]
 800074a:	4605      	mov	r5, r0
 800074c:	460e      	mov	r6, r1
 800074e:	b90b      	cbnz	r3, 8000754 <_puts_r+0x10>
 8000750:	f7ff ffc2 	bl	80006d8 <__sinit>
 8000754:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000756:	07db      	lsls	r3, r3, #31
 8000758:	d405      	bmi.n	8000766 <_puts_r+0x22>
 800075a:	89a3      	ldrh	r3, [r4, #12]
 800075c:	0598      	lsls	r0, r3, #22
 800075e:	d402      	bmi.n	8000766 <_puts_r+0x22>
 8000760:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000762:	f000 f99e 	bl	8000aa2 <__retarget_lock_acquire_recursive>
 8000766:	89a3      	ldrh	r3, [r4, #12]
 8000768:	0719      	lsls	r1, r3, #28
 800076a:	d502      	bpl.n	8000772 <_puts_r+0x2e>
 800076c:	6923      	ldr	r3, [r4, #16]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d135      	bne.n	80007de <_puts_r+0x9a>
 8000772:	4621      	mov	r1, r4
 8000774:	4628      	mov	r0, r5
 8000776:	f000 f8c5 	bl	8000904 <__swsetup_r>
 800077a:	b380      	cbz	r0, 80007de <_puts_r+0x9a>
 800077c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8000780:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000782:	07da      	lsls	r2, r3, #31
 8000784:	d405      	bmi.n	8000792 <_puts_r+0x4e>
 8000786:	89a3      	ldrh	r3, [r4, #12]
 8000788:	059b      	lsls	r3, r3, #22
 800078a:	d402      	bmi.n	8000792 <_puts_r+0x4e>
 800078c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800078e:	f000 f989 	bl	8000aa4 <__retarget_lock_release_recursive>
 8000792:	4628      	mov	r0, r5
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	2b00      	cmp	r3, #0
 8000798:	da04      	bge.n	80007a4 <_puts_r+0x60>
 800079a:	69a2      	ldr	r2, [r4, #24]
 800079c:	429a      	cmp	r2, r3
 800079e:	dc17      	bgt.n	80007d0 <_puts_r+0x8c>
 80007a0:	290a      	cmp	r1, #10
 80007a2:	d015      	beq.n	80007d0 <_puts_r+0x8c>
 80007a4:	6823      	ldr	r3, [r4, #0]
 80007a6:	1c5a      	adds	r2, r3, #1
 80007a8:	6022      	str	r2, [r4, #0]
 80007aa:	7019      	strb	r1, [r3, #0]
 80007ac:	68a3      	ldr	r3, [r4, #8]
 80007ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80007b2:	3b01      	subs	r3, #1
 80007b4:	60a3      	str	r3, [r4, #8]
 80007b6:	2900      	cmp	r1, #0
 80007b8:	d1ed      	bne.n	8000796 <_puts_r+0x52>
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	da11      	bge.n	80007e2 <_puts_r+0x9e>
 80007be:	4622      	mov	r2, r4
 80007c0:	210a      	movs	r1, #10
 80007c2:	4628      	mov	r0, r5
 80007c4:	f000 f85f 	bl	8000886 <__swbuf_r>
 80007c8:	3001      	adds	r0, #1
 80007ca:	d0d7      	beq.n	800077c <_puts_r+0x38>
 80007cc:	250a      	movs	r5, #10
 80007ce:	e7d7      	b.n	8000780 <_puts_r+0x3c>
 80007d0:	4622      	mov	r2, r4
 80007d2:	4628      	mov	r0, r5
 80007d4:	f000 f857 	bl	8000886 <__swbuf_r>
 80007d8:	3001      	adds	r0, #1
 80007da:	d1e7      	bne.n	80007ac <_puts_r+0x68>
 80007dc:	e7ce      	b.n	800077c <_puts_r+0x38>
 80007de:	3e01      	subs	r6, #1
 80007e0:	e7e4      	b.n	80007ac <_puts_r+0x68>
 80007e2:	6823      	ldr	r3, [r4, #0]
 80007e4:	1c5a      	adds	r2, r3, #1
 80007e6:	6022      	str	r2, [r4, #0]
 80007e8:	220a      	movs	r2, #10
 80007ea:	701a      	strb	r2, [r3, #0]
 80007ec:	e7ee      	b.n	80007cc <_puts_r+0x88>
	...

080007f0 <puts>:
 80007f0:	4b02      	ldr	r3, [pc, #8]	@ (80007fc <puts+0xc>)
 80007f2:	4601      	mov	r1, r0
 80007f4:	6818      	ldr	r0, [r3, #0]
 80007f6:	f7ff bfa5 	b.w	8000744 <_puts_r>
 80007fa:	bf00      	nop
 80007fc:	20000010 	.word	0x20000010

08000800 <__sread>:
 8000800:	b510      	push	{r4, lr}
 8000802:	460c      	mov	r4, r1
 8000804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000808:	f000 f8fc 	bl	8000a04 <_read_r>
 800080c:	2800      	cmp	r0, #0
 800080e:	bfab      	itete	ge
 8000810:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000812:	89a3      	ldrhlt	r3, [r4, #12]
 8000814:	181b      	addge	r3, r3, r0
 8000816:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800081a:	bfac      	ite	ge
 800081c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800081e:	81a3      	strhlt	r3, [r4, #12]
 8000820:	bd10      	pop	{r4, pc}

08000822 <__swrite>:
 8000822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000826:	461f      	mov	r7, r3
 8000828:	898b      	ldrh	r3, [r1, #12]
 800082a:	05db      	lsls	r3, r3, #23
 800082c:	4605      	mov	r5, r0
 800082e:	460c      	mov	r4, r1
 8000830:	4616      	mov	r6, r2
 8000832:	d505      	bpl.n	8000840 <__swrite+0x1e>
 8000834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000838:	2302      	movs	r3, #2
 800083a:	2200      	movs	r2, #0
 800083c:	f000 f8d0 	bl	80009e0 <_lseek_r>
 8000840:	89a3      	ldrh	r3, [r4, #12]
 8000842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000846:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800084a:	81a3      	strh	r3, [r4, #12]
 800084c:	4632      	mov	r2, r6
 800084e:	463b      	mov	r3, r7
 8000850:	4628      	mov	r0, r5
 8000852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000856:	f000 b8e7 	b.w	8000a28 <_write_r>

0800085a <__sseek>:
 800085a:	b510      	push	{r4, lr}
 800085c:	460c      	mov	r4, r1
 800085e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000862:	f000 f8bd 	bl	80009e0 <_lseek_r>
 8000866:	1c43      	adds	r3, r0, #1
 8000868:	89a3      	ldrh	r3, [r4, #12]
 800086a:	bf15      	itete	ne
 800086c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800086e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000872:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000876:	81a3      	strheq	r3, [r4, #12]
 8000878:	bf18      	it	ne
 800087a:	81a3      	strhne	r3, [r4, #12]
 800087c:	bd10      	pop	{r4, pc}

0800087e <__sclose>:
 800087e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000882:	f000 b89d 	b.w	80009c0 <_close_r>

08000886 <__swbuf_r>:
 8000886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000888:	460e      	mov	r6, r1
 800088a:	4614      	mov	r4, r2
 800088c:	4605      	mov	r5, r0
 800088e:	b118      	cbz	r0, 8000898 <__swbuf_r+0x12>
 8000890:	6a03      	ldr	r3, [r0, #32]
 8000892:	b90b      	cbnz	r3, 8000898 <__swbuf_r+0x12>
 8000894:	f7ff ff20 	bl	80006d8 <__sinit>
 8000898:	69a3      	ldr	r3, [r4, #24]
 800089a:	60a3      	str	r3, [r4, #8]
 800089c:	89a3      	ldrh	r3, [r4, #12]
 800089e:	071a      	lsls	r2, r3, #28
 80008a0:	d501      	bpl.n	80008a6 <__swbuf_r+0x20>
 80008a2:	6923      	ldr	r3, [r4, #16]
 80008a4:	b943      	cbnz	r3, 80008b8 <__swbuf_r+0x32>
 80008a6:	4621      	mov	r1, r4
 80008a8:	4628      	mov	r0, r5
 80008aa:	f000 f82b 	bl	8000904 <__swsetup_r>
 80008ae:	b118      	cbz	r0, 80008b8 <__swbuf_r+0x32>
 80008b0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80008b4:	4638      	mov	r0, r7
 80008b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008b8:	6823      	ldr	r3, [r4, #0]
 80008ba:	6922      	ldr	r2, [r4, #16]
 80008bc:	1a98      	subs	r0, r3, r2
 80008be:	6963      	ldr	r3, [r4, #20]
 80008c0:	b2f6      	uxtb	r6, r6
 80008c2:	4283      	cmp	r3, r0
 80008c4:	4637      	mov	r7, r6
 80008c6:	dc05      	bgt.n	80008d4 <__swbuf_r+0x4e>
 80008c8:	4621      	mov	r1, r4
 80008ca:	4628      	mov	r0, r5
 80008cc:	f000 fa64 	bl	8000d98 <_fflush_r>
 80008d0:	2800      	cmp	r0, #0
 80008d2:	d1ed      	bne.n	80008b0 <__swbuf_r+0x2a>
 80008d4:	68a3      	ldr	r3, [r4, #8]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	60a3      	str	r3, [r4, #8]
 80008da:	6823      	ldr	r3, [r4, #0]
 80008dc:	1c5a      	adds	r2, r3, #1
 80008de:	6022      	str	r2, [r4, #0]
 80008e0:	701e      	strb	r6, [r3, #0]
 80008e2:	6962      	ldr	r2, [r4, #20]
 80008e4:	1c43      	adds	r3, r0, #1
 80008e6:	429a      	cmp	r2, r3
 80008e8:	d004      	beq.n	80008f4 <__swbuf_r+0x6e>
 80008ea:	89a3      	ldrh	r3, [r4, #12]
 80008ec:	07db      	lsls	r3, r3, #31
 80008ee:	d5e1      	bpl.n	80008b4 <__swbuf_r+0x2e>
 80008f0:	2e0a      	cmp	r6, #10
 80008f2:	d1df      	bne.n	80008b4 <__swbuf_r+0x2e>
 80008f4:	4621      	mov	r1, r4
 80008f6:	4628      	mov	r0, r5
 80008f8:	f000 fa4e 	bl	8000d98 <_fflush_r>
 80008fc:	2800      	cmp	r0, #0
 80008fe:	d0d9      	beq.n	80008b4 <__swbuf_r+0x2e>
 8000900:	e7d6      	b.n	80008b0 <__swbuf_r+0x2a>
	...

08000904 <__swsetup_r>:
 8000904:	b538      	push	{r3, r4, r5, lr}
 8000906:	4b29      	ldr	r3, [pc, #164]	@ (80009ac <__swsetup_r+0xa8>)
 8000908:	4605      	mov	r5, r0
 800090a:	6818      	ldr	r0, [r3, #0]
 800090c:	460c      	mov	r4, r1
 800090e:	b118      	cbz	r0, 8000918 <__swsetup_r+0x14>
 8000910:	6a03      	ldr	r3, [r0, #32]
 8000912:	b90b      	cbnz	r3, 8000918 <__swsetup_r+0x14>
 8000914:	f7ff fee0 	bl	80006d8 <__sinit>
 8000918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800091c:	0719      	lsls	r1, r3, #28
 800091e:	d422      	bmi.n	8000966 <__swsetup_r+0x62>
 8000920:	06da      	lsls	r2, r3, #27
 8000922:	d407      	bmi.n	8000934 <__swsetup_r+0x30>
 8000924:	2209      	movs	r2, #9
 8000926:	602a      	str	r2, [r5, #0]
 8000928:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800092c:	81a3      	strh	r3, [r4, #12]
 800092e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000932:	e033      	b.n	800099c <__swsetup_r+0x98>
 8000934:	0758      	lsls	r0, r3, #29
 8000936:	d512      	bpl.n	800095e <__swsetup_r+0x5a>
 8000938:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800093a:	b141      	cbz	r1, 800094e <__swsetup_r+0x4a>
 800093c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000940:	4299      	cmp	r1, r3
 8000942:	d002      	beq.n	800094a <__swsetup_r+0x46>
 8000944:	4628      	mov	r0, r5
 8000946:	f000 f8af 	bl	8000aa8 <_free_r>
 800094a:	2300      	movs	r3, #0
 800094c:	6363      	str	r3, [r4, #52]	@ 0x34
 800094e:	89a3      	ldrh	r3, [r4, #12]
 8000950:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000954:	81a3      	strh	r3, [r4, #12]
 8000956:	2300      	movs	r3, #0
 8000958:	6063      	str	r3, [r4, #4]
 800095a:	6923      	ldr	r3, [r4, #16]
 800095c:	6023      	str	r3, [r4, #0]
 800095e:	89a3      	ldrh	r3, [r4, #12]
 8000960:	f043 0308 	orr.w	r3, r3, #8
 8000964:	81a3      	strh	r3, [r4, #12]
 8000966:	6923      	ldr	r3, [r4, #16]
 8000968:	b94b      	cbnz	r3, 800097e <__swsetup_r+0x7a>
 800096a:	89a3      	ldrh	r3, [r4, #12]
 800096c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000970:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000974:	d003      	beq.n	800097e <__swsetup_r+0x7a>
 8000976:	4621      	mov	r1, r4
 8000978:	4628      	mov	r0, r5
 800097a:	f000 fa5b 	bl	8000e34 <__smakebuf_r>
 800097e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000982:	f013 0201 	ands.w	r2, r3, #1
 8000986:	d00a      	beq.n	800099e <__swsetup_r+0x9a>
 8000988:	2200      	movs	r2, #0
 800098a:	60a2      	str	r2, [r4, #8]
 800098c:	6962      	ldr	r2, [r4, #20]
 800098e:	4252      	negs	r2, r2
 8000990:	61a2      	str	r2, [r4, #24]
 8000992:	6922      	ldr	r2, [r4, #16]
 8000994:	b942      	cbnz	r2, 80009a8 <__swsetup_r+0xa4>
 8000996:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800099a:	d1c5      	bne.n	8000928 <__swsetup_r+0x24>
 800099c:	bd38      	pop	{r3, r4, r5, pc}
 800099e:	0799      	lsls	r1, r3, #30
 80009a0:	bf58      	it	pl
 80009a2:	6962      	ldrpl	r2, [r4, #20]
 80009a4:	60a2      	str	r2, [r4, #8]
 80009a6:	e7f4      	b.n	8000992 <__swsetup_r+0x8e>
 80009a8:	2000      	movs	r0, #0
 80009aa:	e7f7      	b.n	800099c <__swsetup_r+0x98>
 80009ac:	20000010 	.word	0x20000010

080009b0 <memset>:
 80009b0:	4402      	add	r2, r0
 80009b2:	4603      	mov	r3, r0
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d100      	bne.n	80009ba <memset+0xa>
 80009b8:	4770      	bx	lr
 80009ba:	f803 1b01 	strb.w	r1, [r3], #1
 80009be:	e7f9      	b.n	80009b4 <memset+0x4>

080009c0 <_close_r>:
 80009c0:	b538      	push	{r3, r4, r5, lr}
 80009c2:	4d06      	ldr	r5, [pc, #24]	@ (80009dc <_close_r+0x1c>)
 80009c4:	2300      	movs	r3, #0
 80009c6:	4604      	mov	r4, r0
 80009c8:	4608      	mov	r0, r1
 80009ca:	602b      	str	r3, [r5, #0]
 80009cc:	f7ff fd31 	bl	8000432 <_close>
 80009d0:	1c43      	adds	r3, r0, #1
 80009d2:	d102      	bne.n	80009da <_close_r+0x1a>
 80009d4:	682b      	ldr	r3, [r5, #0]
 80009d6:	b103      	cbz	r3, 80009da <_close_r+0x1a>
 80009d8:	6023      	str	r3, [r4, #0]
 80009da:	bd38      	pop	{r3, r4, r5, pc}
 80009dc:	200001bc 	.word	0x200001bc

080009e0 <_lseek_r>:
 80009e0:	b538      	push	{r3, r4, r5, lr}
 80009e2:	4d07      	ldr	r5, [pc, #28]	@ (8000a00 <_lseek_r+0x20>)
 80009e4:	4604      	mov	r4, r0
 80009e6:	4608      	mov	r0, r1
 80009e8:	4611      	mov	r1, r2
 80009ea:	2200      	movs	r2, #0
 80009ec:	602a      	str	r2, [r5, #0]
 80009ee:	461a      	mov	r2, r3
 80009f0:	f7ff fd43 	bl	800047a <_lseek>
 80009f4:	1c43      	adds	r3, r0, #1
 80009f6:	d102      	bne.n	80009fe <_lseek_r+0x1e>
 80009f8:	682b      	ldr	r3, [r5, #0]
 80009fa:	b103      	cbz	r3, 80009fe <_lseek_r+0x1e>
 80009fc:	6023      	str	r3, [r4, #0]
 80009fe:	bd38      	pop	{r3, r4, r5, pc}
 8000a00:	200001bc 	.word	0x200001bc

08000a04 <_read_r>:
 8000a04:	b538      	push	{r3, r4, r5, lr}
 8000a06:	4d07      	ldr	r5, [pc, #28]	@ (8000a24 <_read_r+0x20>)
 8000a08:	4604      	mov	r4, r0
 8000a0a:	4608      	mov	r0, r1
 8000a0c:	4611      	mov	r1, r2
 8000a0e:	2200      	movs	r2, #0
 8000a10:	602a      	str	r2, [r5, #0]
 8000a12:	461a      	mov	r2, r3
 8000a14:	f7ff fcd4 	bl	80003c0 <_read>
 8000a18:	1c43      	adds	r3, r0, #1
 8000a1a:	d102      	bne.n	8000a22 <_read_r+0x1e>
 8000a1c:	682b      	ldr	r3, [r5, #0]
 8000a1e:	b103      	cbz	r3, 8000a22 <_read_r+0x1e>
 8000a20:	6023      	str	r3, [r4, #0]
 8000a22:	bd38      	pop	{r3, r4, r5, pc}
 8000a24:	200001bc 	.word	0x200001bc

08000a28 <_write_r>:
 8000a28:	b538      	push	{r3, r4, r5, lr}
 8000a2a:	4d07      	ldr	r5, [pc, #28]	@ (8000a48 <_write_r+0x20>)
 8000a2c:	4604      	mov	r4, r0
 8000a2e:	4608      	mov	r0, r1
 8000a30:	4611      	mov	r1, r2
 8000a32:	2200      	movs	r2, #0
 8000a34:	602a      	str	r2, [r5, #0]
 8000a36:	461a      	mov	r2, r3
 8000a38:	f7ff fcdf 	bl	80003fa <_write>
 8000a3c:	1c43      	adds	r3, r0, #1
 8000a3e:	d102      	bne.n	8000a46 <_write_r+0x1e>
 8000a40:	682b      	ldr	r3, [r5, #0]
 8000a42:	b103      	cbz	r3, 8000a46 <_write_r+0x1e>
 8000a44:	6023      	str	r3, [r4, #0]
 8000a46:	bd38      	pop	{r3, r4, r5, pc}
 8000a48:	200001bc 	.word	0x200001bc

08000a4c <__errno>:
 8000a4c:	4b01      	ldr	r3, [pc, #4]	@ (8000a54 <__errno+0x8>)
 8000a4e:	6818      	ldr	r0, [r3, #0]
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	20000010 	.word	0x20000010

08000a58 <__libc_init_array>:
 8000a58:	b570      	push	{r4, r5, r6, lr}
 8000a5a:	4d0d      	ldr	r5, [pc, #52]	@ (8000a90 <__libc_init_array+0x38>)
 8000a5c:	4c0d      	ldr	r4, [pc, #52]	@ (8000a94 <__libc_init_array+0x3c>)
 8000a5e:	1b64      	subs	r4, r4, r5
 8000a60:	10a4      	asrs	r4, r4, #2
 8000a62:	2600      	movs	r6, #0
 8000a64:	42a6      	cmp	r6, r4
 8000a66:	d109      	bne.n	8000a7c <__libc_init_array+0x24>
 8000a68:	4d0b      	ldr	r5, [pc, #44]	@ (8000a98 <__libc_init_array+0x40>)
 8000a6a:	4c0c      	ldr	r4, [pc, #48]	@ (8000a9c <__libc_init_array+0x44>)
 8000a6c:	f000 fa50 	bl	8000f10 <_init>
 8000a70:	1b64      	subs	r4, r4, r5
 8000a72:	10a4      	asrs	r4, r4, #2
 8000a74:	2600      	movs	r6, #0
 8000a76:	42a6      	cmp	r6, r4
 8000a78:	d105      	bne.n	8000a86 <__libc_init_array+0x2e>
 8000a7a:	bd70      	pop	{r4, r5, r6, pc}
 8000a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a80:	4798      	blx	r3
 8000a82:	3601      	adds	r6, #1
 8000a84:	e7ee      	b.n	8000a64 <__libc_init_array+0xc>
 8000a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a8a:	4798      	blx	r3
 8000a8c:	3601      	adds	r6, #1
 8000a8e:	e7f2      	b.n	8000a76 <__libc_init_array+0x1e>
 8000a90:	08000f54 	.word	0x08000f54
 8000a94:	08000f54 	.word	0x08000f54
 8000a98:	08000f54 	.word	0x08000f54
 8000a9c:	08000f58 	.word	0x08000f58

08000aa0 <__retarget_lock_init_recursive>:
 8000aa0:	4770      	bx	lr

08000aa2 <__retarget_lock_acquire_recursive>:
 8000aa2:	4770      	bx	lr

08000aa4 <__retarget_lock_release_recursive>:
 8000aa4:	4770      	bx	lr
	...

08000aa8 <_free_r>:
 8000aa8:	b538      	push	{r3, r4, r5, lr}
 8000aaa:	4605      	mov	r5, r0
 8000aac:	2900      	cmp	r1, #0
 8000aae:	d041      	beq.n	8000b34 <_free_r+0x8c>
 8000ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ab4:	1f0c      	subs	r4, r1, #4
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	bfb8      	it	lt
 8000aba:	18e4      	addlt	r4, r4, r3
 8000abc:	f000 f8e0 	bl	8000c80 <__malloc_lock>
 8000ac0:	4a1d      	ldr	r2, [pc, #116]	@ (8000b38 <_free_r+0x90>)
 8000ac2:	6813      	ldr	r3, [r2, #0]
 8000ac4:	b933      	cbnz	r3, 8000ad4 <_free_r+0x2c>
 8000ac6:	6063      	str	r3, [r4, #4]
 8000ac8:	6014      	str	r4, [r2, #0]
 8000aca:	4628      	mov	r0, r5
 8000acc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ad0:	f000 b8dc 	b.w	8000c8c <__malloc_unlock>
 8000ad4:	42a3      	cmp	r3, r4
 8000ad6:	d908      	bls.n	8000aea <_free_r+0x42>
 8000ad8:	6820      	ldr	r0, [r4, #0]
 8000ada:	1821      	adds	r1, r4, r0
 8000adc:	428b      	cmp	r3, r1
 8000ade:	bf01      	itttt	eq
 8000ae0:	6819      	ldreq	r1, [r3, #0]
 8000ae2:	685b      	ldreq	r3, [r3, #4]
 8000ae4:	1809      	addeq	r1, r1, r0
 8000ae6:	6021      	streq	r1, [r4, #0]
 8000ae8:	e7ed      	b.n	8000ac6 <_free_r+0x1e>
 8000aea:	461a      	mov	r2, r3
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	b10b      	cbz	r3, 8000af4 <_free_r+0x4c>
 8000af0:	42a3      	cmp	r3, r4
 8000af2:	d9fa      	bls.n	8000aea <_free_r+0x42>
 8000af4:	6811      	ldr	r1, [r2, #0]
 8000af6:	1850      	adds	r0, r2, r1
 8000af8:	42a0      	cmp	r0, r4
 8000afa:	d10b      	bne.n	8000b14 <_free_r+0x6c>
 8000afc:	6820      	ldr	r0, [r4, #0]
 8000afe:	4401      	add	r1, r0
 8000b00:	1850      	adds	r0, r2, r1
 8000b02:	4283      	cmp	r3, r0
 8000b04:	6011      	str	r1, [r2, #0]
 8000b06:	d1e0      	bne.n	8000aca <_free_r+0x22>
 8000b08:	6818      	ldr	r0, [r3, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	6053      	str	r3, [r2, #4]
 8000b0e:	4408      	add	r0, r1
 8000b10:	6010      	str	r0, [r2, #0]
 8000b12:	e7da      	b.n	8000aca <_free_r+0x22>
 8000b14:	d902      	bls.n	8000b1c <_free_r+0x74>
 8000b16:	230c      	movs	r3, #12
 8000b18:	602b      	str	r3, [r5, #0]
 8000b1a:	e7d6      	b.n	8000aca <_free_r+0x22>
 8000b1c:	6820      	ldr	r0, [r4, #0]
 8000b1e:	1821      	adds	r1, r4, r0
 8000b20:	428b      	cmp	r3, r1
 8000b22:	bf04      	itt	eq
 8000b24:	6819      	ldreq	r1, [r3, #0]
 8000b26:	685b      	ldreq	r3, [r3, #4]
 8000b28:	6063      	str	r3, [r4, #4]
 8000b2a:	bf04      	itt	eq
 8000b2c:	1809      	addeq	r1, r1, r0
 8000b2e:	6021      	streq	r1, [r4, #0]
 8000b30:	6054      	str	r4, [r2, #4]
 8000b32:	e7ca      	b.n	8000aca <_free_r+0x22>
 8000b34:	bd38      	pop	{r3, r4, r5, pc}
 8000b36:	bf00      	nop
 8000b38:	200001c8 	.word	0x200001c8

08000b3c <sbrk_aligned>:
 8000b3c:	b570      	push	{r4, r5, r6, lr}
 8000b3e:	4e0f      	ldr	r6, [pc, #60]	@ (8000b7c <sbrk_aligned+0x40>)
 8000b40:	460c      	mov	r4, r1
 8000b42:	6831      	ldr	r1, [r6, #0]
 8000b44:	4605      	mov	r5, r0
 8000b46:	b911      	cbnz	r1, 8000b4e <sbrk_aligned+0x12>
 8000b48:	f000 f9d2 	bl	8000ef0 <_sbrk_r>
 8000b4c:	6030      	str	r0, [r6, #0]
 8000b4e:	4621      	mov	r1, r4
 8000b50:	4628      	mov	r0, r5
 8000b52:	f000 f9cd 	bl	8000ef0 <_sbrk_r>
 8000b56:	1c43      	adds	r3, r0, #1
 8000b58:	d103      	bne.n	8000b62 <sbrk_aligned+0x26>
 8000b5a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000b5e:	4620      	mov	r0, r4
 8000b60:	bd70      	pop	{r4, r5, r6, pc}
 8000b62:	1cc4      	adds	r4, r0, #3
 8000b64:	f024 0403 	bic.w	r4, r4, #3
 8000b68:	42a0      	cmp	r0, r4
 8000b6a:	d0f8      	beq.n	8000b5e <sbrk_aligned+0x22>
 8000b6c:	1a21      	subs	r1, r4, r0
 8000b6e:	4628      	mov	r0, r5
 8000b70:	f000 f9be 	bl	8000ef0 <_sbrk_r>
 8000b74:	3001      	adds	r0, #1
 8000b76:	d1f2      	bne.n	8000b5e <sbrk_aligned+0x22>
 8000b78:	e7ef      	b.n	8000b5a <sbrk_aligned+0x1e>
 8000b7a:	bf00      	nop
 8000b7c:	200001c4 	.word	0x200001c4

08000b80 <_malloc_r>:
 8000b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b84:	1ccd      	adds	r5, r1, #3
 8000b86:	f025 0503 	bic.w	r5, r5, #3
 8000b8a:	3508      	adds	r5, #8
 8000b8c:	2d0c      	cmp	r5, #12
 8000b8e:	bf38      	it	cc
 8000b90:	250c      	movcc	r5, #12
 8000b92:	2d00      	cmp	r5, #0
 8000b94:	4606      	mov	r6, r0
 8000b96:	db01      	blt.n	8000b9c <_malloc_r+0x1c>
 8000b98:	42a9      	cmp	r1, r5
 8000b9a:	d904      	bls.n	8000ba6 <_malloc_r+0x26>
 8000b9c:	230c      	movs	r3, #12
 8000b9e:	6033      	str	r3, [r6, #0]
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ba6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c7c <_malloc_r+0xfc>
 8000baa:	f000 f869 	bl	8000c80 <__malloc_lock>
 8000bae:	f8d8 3000 	ldr.w	r3, [r8]
 8000bb2:	461c      	mov	r4, r3
 8000bb4:	bb44      	cbnz	r4, 8000c08 <_malloc_r+0x88>
 8000bb6:	4629      	mov	r1, r5
 8000bb8:	4630      	mov	r0, r6
 8000bba:	f7ff ffbf 	bl	8000b3c <sbrk_aligned>
 8000bbe:	1c43      	adds	r3, r0, #1
 8000bc0:	4604      	mov	r4, r0
 8000bc2:	d158      	bne.n	8000c76 <_malloc_r+0xf6>
 8000bc4:	f8d8 4000 	ldr.w	r4, [r8]
 8000bc8:	4627      	mov	r7, r4
 8000bca:	2f00      	cmp	r7, #0
 8000bcc:	d143      	bne.n	8000c56 <_malloc_r+0xd6>
 8000bce:	2c00      	cmp	r4, #0
 8000bd0:	d04b      	beq.n	8000c6a <_malloc_r+0xea>
 8000bd2:	6823      	ldr	r3, [r4, #0]
 8000bd4:	4639      	mov	r1, r7
 8000bd6:	4630      	mov	r0, r6
 8000bd8:	eb04 0903 	add.w	r9, r4, r3
 8000bdc:	f000 f988 	bl	8000ef0 <_sbrk_r>
 8000be0:	4581      	cmp	r9, r0
 8000be2:	d142      	bne.n	8000c6a <_malloc_r+0xea>
 8000be4:	6821      	ldr	r1, [r4, #0]
 8000be6:	1a6d      	subs	r5, r5, r1
 8000be8:	4629      	mov	r1, r5
 8000bea:	4630      	mov	r0, r6
 8000bec:	f7ff ffa6 	bl	8000b3c <sbrk_aligned>
 8000bf0:	3001      	adds	r0, #1
 8000bf2:	d03a      	beq.n	8000c6a <_malloc_r+0xea>
 8000bf4:	6823      	ldr	r3, [r4, #0]
 8000bf6:	442b      	add	r3, r5
 8000bf8:	6023      	str	r3, [r4, #0]
 8000bfa:	f8d8 3000 	ldr.w	r3, [r8]
 8000bfe:	685a      	ldr	r2, [r3, #4]
 8000c00:	bb62      	cbnz	r2, 8000c5c <_malloc_r+0xdc>
 8000c02:	f8c8 7000 	str.w	r7, [r8]
 8000c06:	e00f      	b.n	8000c28 <_malloc_r+0xa8>
 8000c08:	6822      	ldr	r2, [r4, #0]
 8000c0a:	1b52      	subs	r2, r2, r5
 8000c0c:	d420      	bmi.n	8000c50 <_malloc_r+0xd0>
 8000c0e:	2a0b      	cmp	r2, #11
 8000c10:	d917      	bls.n	8000c42 <_malloc_r+0xc2>
 8000c12:	1961      	adds	r1, r4, r5
 8000c14:	42a3      	cmp	r3, r4
 8000c16:	6025      	str	r5, [r4, #0]
 8000c18:	bf18      	it	ne
 8000c1a:	6059      	strne	r1, [r3, #4]
 8000c1c:	6863      	ldr	r3, [r4, #4]
 8000c1e:	bf08      	it	eq
 8000c20:	f8c8 1000 	streq.w	r1, [r8]
 8000c24:	5162      	str	r2, [r4, r5]
 8000c26:	604b      	str	r3, [r1, #4]
 8000c28:	4630      	mov	r0, r6
 8000c2a:	f000 f82f 	bl	8000c8c <__malloc_unlock>
 8000c2e:	f104 000b 	add.w	r0, r4, #11
 8000c32:	1d23      	adds	r3, r4, #4
 8000c34:	f020 0007 	bic.w	r0, r0, #7
 8000c38:	1ac2      	subs	r2, r0, r3
 8000c3a:	bf1c      	itt	ne
 8000c3c:	1a1b      	subne	r3, r3, r0
 8000c3e:	50a3      	strne	r3, [r4, r2]
 8000c40:	e7af      	b.n	8000ba2 <_malloc_r+0x22>
 8000c42:	6862      	ldr	r2, [r4, #4]
 8000c44:	42a3      	cmp	r3, r4
 8000c46:	bf0c      	ite	eq
 8000c48:	f8c8 2000 	streq.w	r2, [r8]
 8000c4c:	605a      	strne	r2, [r3, #4]
 8000c4e:	e7eb      	b.n	8000c28 <_malloc_r+0xa8>
 8000c50:	4623      	mov	r3, r4
 8000c52:	6864      	ldr	r4, [r4, #4]
 8000c54:	e7ae      	b.n	8000bb4 <_malloc_r+0x34>
 8000c56:	463c      	mov	r4, r7
 8000c58:	687f      	ldr	r7, [r7, #4]
 8000c5a:	e7b6      	b.n	8000bca <_malloc_r+0x4a>
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	42a3      	cmp	r3, r4
 8000c62:	d1fb      	bne.n	8000c5c <_malloc_r+0xdc>
 8000c64:	2300      	movs	r3, #0
 8000c66:	6053      	str	r3, [r2, #4]
 8000c68:	e7de      	b.n	8000c28 <_malloc_r+0xa8>
 8000c6a:	230c      	movs	r3, #12
 8000c6c:	6033      	str	r3, [r6, #0]
 8000c6e:	4630      	mov	r0, r6
 8000c70:	f000 f80c 	bl	8000c8c <__malloc_unlock>
 8000c74:	e794      	b.n	8000ba0 <_malloc_r+0x20>
 8000c76:	6005      	str	r5, [r0, #0]
 8000c78:	e7d6      	b.n	8000c28 <_malloc_r+0xa8>
 8000c7a:	bf00      	nop
 8000c7c:	200001c8 	.word	0x200001c8

08000c80 <__malloc_lock>:
 8000c80:	4801      	ldr	r0, [pc, #4]	@ (8000c88 <__malloc_lock+0x8>)
 8000c82:	f7ff bf0e 	b.w	8000aa2 <__retarget_lock_acquire_recursive>
 8000c86:	bf00      	nop
 8000c88:	200001c0 	.word	0x200001c0

08000c8c <__malloc_unlock>:
 8000c8c:	4801      	ldr	r0, [pc, #4]	@ (8000c94 <__malloc_unlock+0x8>)
 8000c8e:	f7ff bf09 	b.w	8000aa4 <__retarget_lock_release_recursive>
 8000c92:	bf00      	nop
 8000c94:	200001c0 	.word	0x200001c0

08000c98 <__sflush_r>:
 8000c98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c9e:	0716      	lsls	r6, r2, #28
 8000ca0:	4605      	mov	r5, r0
 8000ca2:	460c      	mov	r4, r1
 8000ca4:	d454      	bmi.n	8000d50 <__sflush_r+0xb8>
 8000ca6:	684b      	ldr	r3, [r1, #4]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	dc02      	bgt.n	8000cb2 <__sflush_r+0x1a>
 8000cac:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	dd48      	ble.n	8000d44 <__sflush_r+0xac>
 8000cb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000cb4:	2e00      	cmp	r6, #0
 8000cb6:	d045      	beq.n	8000d44 <__sflush_r+0xac>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000cbe:	682f      	ldr	r7, [r5, #0]
 8000cc0:	6a21      	ldr	r1, [r4, #32]
 8000cc2:	602b      	str	r3, [r5, #0]
 8000cc4:	d030      	beq.n	8000d28 <__sflush_r+0x90>
 8000cc6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000cc8:	89a3      	ldrh	r3, [r4, #12]
 8000cca:	0759      	lsls	r1, r3, #29
 8000ccc:	d505      	bpl.n	8000cda <__sflush_r+0x42>
 8000cce:	6863      	ldr	r3, [r4, #4]
 8000cd0:	1ad2      	subs	r2, r2, r3
 8000cd2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000cd4:	b10b      	cbz	r3, 8000cda <__sflush_r+0x42>
 8000cd6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000cd8:	1ad2      	subs	r2, r2, r3
 8000cda:	2300      	movs	r3, #0
 8000cdc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000cde:	6a21      	ldr	r1, [r4, #32]
 8000ce0:	4628      	mov	r0, r5
 8000ce2:	47b0      	blx	r6
 8000ce4:	1c43      	adds	r3, r0, #1
 8000ce6:	89a3      	ldrh	r3, [r4, #12]
 8000ce8:	d106      	bne.n	8000cf8 <__sflush_r+0x60>
 8000cea:	6829      	ldr	r1, [r5, #0]
 8000cec:	291d      	cmp	r1, #29
 8000cee:	d82b      	bhi.n	8000d48 <__sflush_r+0xb0>
 8000cf0:	4a28      	ldr	r2, [pc, #160]	@ (8000d94 <__sflush_r+0xfc>)
 8000cf2:	410a      	asrs	r2, r1
 8000cf4:	07d6      	lsls	r6, r2, #31
 8000cf6:	d427      	bmi.n	8000d48 <__sflush_r+0xb0>
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	6062      	str	r2, [r4, #4]
 8000cfc:	04d9      	lsls	r1, r3, #19
 8000cfe:	6922      	ldr	r2, [r4, #16]
 8000d00:	6022      	str	r2, [r4, #0]
 8000d02:	d504      	bpl.n	8000d0e <__sflush_r+0x76>
 8000d04:	1c42      	adds	r2, r0, #1
 8000d06:	d101      	bne.n	8000d0c <__sflush_r+0x74>
 8000d08:	682b      	ldr	r3, [r5, #0]
 8000d0a:	b903      	cbnz	r3, 8000d0e <__sflush_r+0x76>
 8000d0c:	6560      	str	r0, [r4, #84]	@ 0x54
 8000d0e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000d10:	602f      	str	r7, [r5, #0]
 8000d12:	b1b9      	cbz	r1, 8000d44 <__sflush_r+0xac>
 8000d14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000d18:	4299      	cmp	r1, r3
 8000d1a:	d002      	beq.n	8000d22 <__sflush_r+0x8a>
 8000d1c:	4628      	mov	r0, r5
 8000d1e:	f7ff fec3 	bl	8000aa8 <_free_r>
 8000d22:	2300      	movs	r3, #0
 8000d24:	6363      	str	r3, [r4, #52]	@ 0x34
 8000d26:	e00d      	b.n	8000d44 <__sflush_r+0xac>
 8000d28:	2301      	movs	r3, #1
 8000d2a:	4628      	mov	r0, r5
 8000d2c:	47b0      	blx	r6
 8000d2e:	4602      	mov	r2, r0
 8000d30:	1c50      	adds	r0, r2, #1
 8000d32:	d1c9      	bne.n	8000cc8 <__sflush_r+0x30>
 8000d34:	682b      	ldr	r3, [r5, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0c6      	beq.n	8000cc8 <__sflush_r+0x30>
 8000d3a:	2b1d      	cmp	r3, #29
 8000d3c:	d001      	beq.n	8000d42 <__sflush_r+0xaa>
 8000d3e:	2b16      	cmp	r3, #22
 8000d40:	d11d      	bne.n	8000d7e <__sflush_r+0xe6>
 8000d42:	602f      	str	r7, [r5, #0]
 8000d44:	2000      	movs	r0, #0
 8000d46:	e021      	b.n	8000d8c <__sflush_r+0xf4>
 8000d48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d4c:	b21b      	sxth	r3, r3
 8000d4e:	e01a      	b.n	8000d86 <__sflush_r+0xee>
 8000d50:	690f      	ldr	r7, [r1, #16]
 8000d52:	2f00      	cmp	r7, #0
 8000d54:	d0f6      	beq.n	8000d44 <__sflush_r+0xac>
 8000d56:	0793      	lsls	r3, r2, #30
 8000d58:	680e      	ldr	r6, [r1, #0]
 8000d5a:	bf08      	it	eq
 8000d5c:	694b      	ldreq	r3, [r1, #20]
 8000d5e:	600f      	str	r7, [r1, #0]
 8000d60:	bf18      	it	ne
 8000d62:	2300      	movne	r3, #0
 8000d64:	1bf6      	subs	r6, r6, r7
 8000d66:	608b      	str	r3, [r1, #8]
 8000d68:	2e00      	cmp	r6, #0
 8000d6a:	ddeb      	ble.n	8000d44 <__sflush_r+0xac>
 8000d6c:	6a21      	ldr	r1, [r4, #32]
 8000d6e:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8000d72:	4633      	mov	r3, r6
 8000d74:	463a      	mov	r2, r7
 8000d76:	4628      	mov	r0, r5
 8000d78:	47e0      	blx	ip
 8000d7a:	2800      	cmp	r0, #0
 8000d7c:	dc07      	bgt.n	8000d8e <__sflush_r+0xf6>
 8000d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d86:	81a3      	strh	r3, [r4, #12]
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d8e:	4407      	add	r7, r0
 8000d90:	1a36      	subs	r6, r6, r0
 8000d92:	e7e9      	b.n	8000d68 <__sflush_r+0xd0>
 8000d94:	dfbffffe 	.word	0xdfbffffe

08000d98 <_fflush_r>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	690b      	ldr	r3, [r1, #16]
 8000d9c:	4605      	mov	r5, r0
 8000d9e:	460c      	mov	r4, r1
 8000da0:	b913      	cbnz	r3, 8000da8 <_fflush_r+0x10>
 8000da2:	2500      	movs	r5, #0
 8000da4:	4628      	mov	r0, r5
 8000da6:	bd38      	pop	{r3, r4, r5, pc}
 8000da8:	b118      	cbz	r0, 8000db2 <_fflush_r+0x1a>
 8000daa:	6a03      	ldr	r3, [r0, #32]
 8000dac:	b90b      	cbnz	r3, 8000db2 <_fflush_r+0x1a>
 8000dae:	f7ff fc93 	bl	80006d8 <__sinit>
 8000db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d0f3      	beq.n	8000da2 <_fflush_r+0xa>
 8000dba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000dbc:	07d0      	lsls	r0, r2, #31
 8000dbe:	d404      	bmi.n	8000dca <_fflush_r+0x32>
 8000dc0:	0599      	lsls	r1, r3, #22
 8000dc2:	d402      	bmi.n	8000dca <_fflush_r+0x32>
 8000dc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000dc6:	f7ff fe6c 	bl	8000aa2 <__retarget_lock_acquire_recursive>
 8000dca:	4628      	mov	r0, r5
 8000dcc:	4621      	mov	r1, r4
 8000dce:	f7ff ff63 	bl	8000c98 <__sflush_r>
 8000dd2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000dd4:	07da      	lsls	r2, r3, #31
 8000dd6:	4605      	mov	r5, r0
 8000dd8:	d4e4      	bmi.n	8000da4 <_fflush_r+0xc>
 8000dda:	89a3      	ldrh	r3, [r4, #12]
 8000ddc:	059b      	lsls	r3, r3, #22
 8000dde:	d4e1      	bmi.n	8000da4 <_fflush_r+0xc>
 8000de0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000de2:	f7ff fe5f 	bl	8000aa4 <__retarget_lock_release_recursive>
 8000de6:	e7dd      	b.n	8000da4 <_fflush_r+0xc>

08000de8 <__swhatbuf_r>:
 8000de8:	b570      	push	{r4, r5, r6, lr}
 8000dea:	460c      	mov	r4, r1
 8000dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000df0:	2900      	cmp	r1, #0
 8000df2:	b096      	sub	sp, #88	@ 0x58
 8000df4:	4615      	mov	r5, r2
 8000df6:	461e      	mov	r6, r3
 8000df8:	da0d      	bge.n	8000e16 <__swhatbuf_r+0x2e>
 8000dfa:	89a3      	ldrh	r3, [r4, #12]
 8000dfc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000e00:	f04f 0100 	mov.w	r1, #0
 8000e04:	bf14      	ite	ne
 8000e06:	2340      	movne	r3, #64	@ 0x40
 8000e08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	6031      	str	r1, [r6, #0]
 8000e10:	602b      	str	r3, [r5, #0]
 8000e12:	b016      	add	sp, #88	@ 0x58
 8000e14:	bd70      	pop	{r4, r5, r6, pc}
 8000e16:	466a      	mov	r2, sp
 8000e18:	f000 f848 	bl	8000eac <_fstat_r>
 8000e1c:	2800      	cmp	r0, #0
 8000e1e:	dbec      	blt.n	8000dfa <__swhatbuf_r+0x12>
 8000e20:	9901      	ldr	r1, [sp, #4]
 8000e22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000e26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000e2a:	4259      	negs	r1, r3
 8000e2c:	4159      	adcs	r1, r3
 8000e2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e32:	e7eb      	b.n	8000e0c <__swhatbuf_r+0x24>

08000e34 <__smakebuf_r>:
 8000e34:	898b      	ldrh	r3, [r1, #12]
 8000e36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000e38:	079d      	lsls	r5, r3, #30
 8000e3a:	4606      	mov	r6, r0
 8000e3c:	460c      	mov	r4, r1
 8000e3e:	d507      	bpl.n	8000e50 <__smakebuf_r+0x1c>
 8000e40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000e44:	6023      	str	r3, [r4, #0]
 8000e46:	6123      	str	r3, [r4, #16]
 8000e48:	2301      	movs	r3, #1
 8000e4a:	6163      	str	r3, [r4, #20]
 8000e4c:	b003      	add	sp, #12
 8000e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e50:	ab01      	add	r3, sp, #4
 8000e52:	466a      	mov	r2, sp
 8000e54:	f7ff ffc8 	bl	8000de8 <__swhatbuf_r>
 8000e58:	9f00      	ldr	r7, [sp, #0]
 8000e5a:	4605      	mov	r5, r0
 8000e5c:	4639      	mov	r1, r7
 8000e5e:	4630      	mov	r0, r6
 8000e60:	f7ff fe8e 	bl	8000b80 <_malloc_r>
 8000e64:	b948      	cbnz	r0, 8000e7a <__smakebuf_r+0x46>
 8000e66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e6a:	059a      	lsls	r2, r3, #22
 8000e6c:	d4ee      	bmi.n	8000e4c <__smakebuf_r+0x18>
 8000e6e:	f023 0303 	bic.w	r3, r3, #3
 8000e72:	f043 0302 	orr.w	r3, r3, #2
 8000e76:	81a3      	strh	r3, [r4, #12]
 8000e78:	e7e2      	b.n	8000e40 <__smakebuf_r+0xc>
 8000e7a:	89a3      	ldrh	r3, [r4, #12]
 8000e7c:	6020      	str	r0, [r4, #0]
 8000e7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e82:	81a3      	strh	r3, [r4, #12]
 8000e84:	9b01      	ldr	r3, [sp, #4]
 8000e86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000e8a:	b15b      	cbz	r3, 8000ea4 <__smakebuf_r+0x70>
 8000e8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e90:	4630      	mov	r0, r6
 8000e92:	f000 f81d 	bl	8000ed0 <_isatty_r>
 8000e96:	b128      	cbz	r0, 8000ea4 <__smakebuf_r+0x70>
 8000e98:	89a3      	ldrh	r3, [r4, #12]
 8000e9a:	f023 0303 	bic.w	r3, r3, #3
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	81a3      	strh	r3, [r4, #12]
 8000ea4:	89a3      	ldrh	r3, [r4, #12]
 8000ea6:	431d      	orrs	r5, r3
 8000ea8:	81a5      	strh	r5, [r4, #12]
 8000eaa:	e7cf      	b.n	8000e4c <__smakebuf_r+0x18>

08000eac <_fstat_r>:
 8000eac:	b538      	push	{r3, r4, r5, lr}
 8000eae:	4d07      	ldr	r5, [pc, #28]	@ (8000ecc <_fstat_r+0x20>)
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	4604      	mov	r4, r0
 8000eb4:	4608      	mov	r0, r1
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	602b      	str	r3, [r5, #0]
 8000eba:	f7ff fac5 	bl	8000448 <_fstat>
 8000ebe:	1c43      	adds	r3, r0, #1
 8000ec0:	d102      	bne.n	8000ec8 <_fstat_r+0x1c>
 8000ec2:	682b      	ldr	r3, [r5, #0]
 8000ec4:	b103      	cbz	r3, 8000ec8 <_fstat_r+0x1c>
 8000ec6:	6023      	str	r3, [r4, #0]
 8000ec8:	bd38      	pop	{r3, r4, r5, pc}
 8000eca:	bf00      	nop
 8000ecc:	200001bc 	.word	0x200001bc

08000ed0 <_isatty_r>:
 8000ed0:	b538      	push	{r3, r4, r5, lr}
 8000ed2:	4d06      	ldr	r5, [pc, #24]	@ (8000eec <_isatty_r+0x1c>)
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	4604      	mov	r4, r0
 8000ed8:	4608      	mov	r0, r1
 8000eda:	602b      	str	r3, [r5, #0]
 8000edc:	f7ff fac3 	bl	8000466 <_isatty>
 8000ee0:	1c43      	adds	r3, r0, #1
 8000ee2:	d102      	bne.n	8000eea <_isatty_r+0x1a>
 8000ee4:	682b      	ldr	r3, [r5, #0]
 8000ee6:	b103      	cbz	r3, 8000eea <_isatty_r+0x1a>
 8000ee8:	6023      	str	r3, [r4, #0]
 8000eea:	bd38      	pop	{r3, r4, r5, pc}
 8000eec:	200001bc 	.word	0x200001bc

08000ef0 <_sbrk_r>:
 8000ef0:	b538      	push	{r3, r4, r5, lr}
 8000ef2:	4d06      	ldr	r5, [pc, #24]	@ (8000f0c <_sbrk_r+0x1c>)
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	4608      	mov	r0, r1
 8000efa:	602b      	str	r3, [r5, #0]
 8000efc:	f7ff faca 	bl	8000494 <_sbrk>
 8000f00:	1c43      	adds	r3, r0, #1
 8000f02:	d102      	bne.n	8000f0a <_sbrk_r+0x1a>
 8000f04:	682b      	ldr	r3, [r5, #0]
 8000f06:	b103      	cbz	r3, 8000f0a <_sbrk_r+0x1a>
 8000f08:	6023      	str	r3, [r4, #0]
 8000f0a:	bd38      	pop	{r3, r4, r5, pc}
 8000f0c:	200001bc 	.word	0x200001bc

08000f10 <_init>:
 8000f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f12:	bf00      	nop
 8000f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f16:	bc08      	pop	{r3}
 8000f18:	469e      	mov	lr, r3
 8000f1a:	4770      	bx	lr

08000f1c <_fini>:
 8000f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f1e:	bf00      	nop
 8000f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f22:	bc08      	pop	{r3}
 8000f24:	469e      	mov	lr, r3
 8000f26:	4770      	bx	lr
